/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package br.ufpe.cin.motorola.banco;
import java.lang.reflect.Executable;
import java.lang.reflect.Field;
import br.ufpe.cin.motorola.banco.cliente.Cliente;
import br.ufpe.cin.motorola.banco.cliente.TipoCliente;
import br.ufpe.cin.motorola.banco.conta.Conta;
import br.ufpe.cin.motorola.banco.conta.ContaBonificada;
import br.ufpe.cin.motorola.banco.conta.ContaImposto;
import br.ufpe.cin.motorola.banco.conta.Poupanca;
import br.ufpe.cin.motorola.banco.excecoes.*;
import br.ufpe.cin.motorola.banco.fachada.Fachada;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;

import java.lang.reflect.Field;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    Fachada fachada;

    //Inicializando clientes e contas
    Cliente cliente, cliente2;
    Conta c1, c2, c3;

    ContaBonificada cb;
    ContaImposto ci;

    Poupanca cp;

    @BeforeEach
    void setUp() throws ClienteInexistenteException, ClienteExistenteException, ContaExistenteException, ClienteInvalidoException {
        fachada = Fachada.obterInstancia();

        //Criando clientes na memória e cadastrando
        cliente = new Cliente("12345678901", "john", TipoCliente.ESPECIAL);
        cliente2 = new Cliente("741236589", "john", TipoCliente.ESPECIAL);
        fachada.cadastrar(cliente);
        fachada.cadastrar(cliente2);



        //Criando contas na memória e cadastrando
        c1 = new Conta("1",100,cliente);
        fachada.cadastrar(c1);

        c2 = new Conta("2",100,cliente2);
        fachada.cadastrar(c2);


        cb = new ContaBonificada("8", 50, cliente);
        ci = new ContaImposto("9", 50, cliente);
        cp = new Poupanca("22", 50, cliente);

    }

    @AfterEach
    void tearDown() {
        try {
            Field instance = Fachada.class.getDeclaredField("instancia");
            instance.setAccessible(true);
            instance.set(null, null);
            fachada = null;
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void obterInstanciaFachada() {
        Fachada f2 = Fachada.obterInstancia();
        assertEquals(fachada,f2);
    }

    @Test
    void contaBonificada() {
        assertAll("Teste conta bonificada", ()->{
            fachada.cadastrar(cb);
            cb.creditar(50);
            assertEquals(100, cb.getSaldo());
        }, ()->{
            double bonus = cb.getBonus();
            assertEquals(0.5, bonus);
        }, ()->{
            cb.renderBonus();
            assertEquals(100.5, cb.getSaldo());
            cb.renderBonus();
            assertEquals(0, cb.getBonus());
        }, ()->{
            cb.debitar(100.5);
            assertEquals(0, cb.getSaldo());
        }, ()->{
            Exception exception = assertThrows(SaldoInsuficienteException.class, ()->{
               cb.debitar(1);
            });
            String expectedMessage = "Saldo insuficiente!";
            String actualMessage = exception.getMessage();

            assertTrue(actualMessage.contains(expectedMessage));
        }   );

    }

    @Test
    void contaImposto() {
        assertAll("Teste conta bonificada", ()->{
            fachada.cadastrar(ci);
            ci.debitar(12);
            assertEquals(37.988, ci.getSaldo());
        }, ()->{
            Exception exception = assertThrows(SaldoInsuficienteException.class, ()->{
                ci.debitar(70);
            });
            String expectedMessage = "Saldo insuficiente!";
            String actualMessage = exception.getMessage();

            assertTrue(actualMessage.contains(expectedMessage));
        }, ()->{
            ci.debitar(37);
            assertEquals(0.9510000000000005, ci.getSaldo());
        });

    }

    @Test
    void contaPoupanca(){
        assertAll("Teste conta poupança", ()->{
            fachada.cadastrar(cp);
            cp.creditar(50);
            assertEquals(100, cp.getSaldo());
            cp.renderJuros(10);
            assertEquals(1100, cp.getSaldo());
        });
    }

}
